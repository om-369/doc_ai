name: Deploy to AWS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests with coverage
      run: |
        pytest --cov=./ --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
        
    - name: Set up environment variables
      run: |
        echo "FLASK_APP=app.py" >> $GITHUB_ENV
        echo "FLASK_ENV=staging" >> $GITHUB_ENV
        echo "COSMOS_ENDPOINT=${{ secrets.COSMOS_ENDPOINT }}" >> $GITHUB_ENV
        echo "COSMOS_KEY=${{ secrets.COSMOS_KEY }}" >> $GITHUB_ENV
        echo "COSMOS_DATABASE=${{ secrets.COSMOS_DATABASE }}" >> $GITHUB_ENV
        echo "COSMOS_CONTAINER=${{ secrets.COSMOS_CONTAINER }}" >> $GITHUB_ENV
        echo "AZURE_SQL_CONN_STR=${{ secrets.AZURE_SQL_CONN_STR }}" >> $GITHUB_ENV
        echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> $GITHUB_ENV
        echo "SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }}" >> $GITHUB_ENV
        
    - name: Make deploy script executable
      run: chmod +x ./deploy.sh
        
    - name: Deploy to staging
      run: ./deploy.sh
        
    - name: Health check
      run: |
        sleep 10  # Wait for application to start
        curl ${{ secrets.APP_URL }}/health
        
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
        
    - name: Set up environment variables
      run: |
        echo "FLASK_APP=app.py" >> $GITHUB_ENV
        echo "FLASK_ENV=production" >> $GITHUB_ENV
        echo "COSMOS_ENDPOINT=${{ secrets.COSMOS_ENDPOINT }}" >> $GITHUB_ENV
        echo "COSMOS_KEY=${{ secrets.COSMOS_KEY }}" >> $GITHUB_ENV
        echo "COSMOS_DATABASE=${{ secrets.COSMOS_DATABASE }}" >> $GITHUB_ENV
        echo "COSMOS_CONTAINER=${{ secrets.COSMOS_CONTAINER }}" >> $GITHUB_ENV
        echo "AZURE_SQL_CONN_STR=${{ secrets.AZURE_SQL_CONN_STR }}" >> $GITHUB_ENV
        echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> $GITHUB_ENV
        echo "SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }}" >> $GITHUB_ENV
        
    - name: Make deploy script executable
      run: chmod +x ./deploy.sh
        
    - name: Deploy to production
      run: ./deploy.sh
        
    - name: Health check
      run: |
        sleep 10  # Wait for application to start
        curl ${{ secrets.APP_URL }}/health
        
    - name: Setup monitoring
      run: |
        aws cloudwatch put-metric-alarm \
          --alarm-name doc-ai-high-cpu \
          --metric-name CPUUtilization \
          --namespace AWS/EC2 \
          --statistic Average \
          --period 300 \
          --threshold 80 \
          --comparison-operator GreaterThanThreshold \
          --evaluation-periods 2 \
          --alarm-actions ${{ secrets.SNS_TOPIC_ARN }} \
          --dimensions Name=AutoScalingGroupName,Value=doc-ai-asg
